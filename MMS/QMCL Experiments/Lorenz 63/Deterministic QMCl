[training] = ode4(@l63_for_ode_solvers,[0:.01:50000],[2;2;2]);
[QM] = ode4(@l63_for_ode_solvers,[0:.01:50000],[1.99; 2;2]);

training = transpose(training);
QM = transpose(QM);
QM_initial = QM(:,50000); %starting point of QMCl model 
training_initial = training(:,50000); %starting point of training data trajectory

new_data = 5000; %amount of data to produce
timestep = .01; %timestep of QMCl model output 
N = 70000; %amount of training data
meas_eps = 1;
L = 1000; %spectral resolution
K = 3; %number of timesteps between quantum state updates in QMCl model

%%data_kontiki_output = QMDA_Main_deterministic_RK4(50000, .01, 10000, QM_initial, training_initial, 2, 1000, 1);
%%save("Konitki_Output_Data_5", "data_kontiki_output")





[training] = ode4(@l63_for_ode_solvers,[0:.01:5000],[1;0;0]);
[QM] = ode4(@l63_for_ode_solvers,[0:.01:5000],[1.01; 0;0]);

dbstop if error

training = transpose(training);
QM = transpose(QM);
QM_initial = QM(:,500000);
training_initial = training(:,500000);

%data_kontiki_output = QMDA_Main_deterministic_RK4(30000, .01, 75000, QM_initial, training_initial, 2.5, 1500, 1);
%save("Konitki_Output_Data_2", "data_kontiki_output")

data_kontiki_output = QMDA_Main(20000, .01, 20000, QM_initial, training_initial);
save("Konitki_Stochastic_Output_Data_2", "data_kontiki_output")
